# Git Шпаргалка (Cheat Sheet)

## Основные возможности Git
- Отслеживание изменений в коде
- Возможность откатываться к предыдущим версиям
- Работа в команде
- Создание и управление ветками

---

## Основные команды Git

### Настройка Git (один раз):
```
git config --global user.name "ФамилияИмя"
git config --global user.email "Email@example.com"
```

### Создание или подключение репозитория:
```
git init          # Создать новый локальный репозиторий
git clone URL     # Склонировать (скачать) репозиторий с GitHub
```

### Работа с файлами:
```
git status        # Посмотреть статус (какие файлы изменены)
git add .         # Добавить все измененные файлы в индекс
git commit -m "Сообщение"  # Закоммитить (сохранить) изменения
```

### Работа с ветками:
```
git branch new-feature  # Создать новую ветку
git checkout new-feature  # Переключиться на неё
git switch new-feature  # Альтернативный способ переключения (новее)
git merge new-feature  # Объединить ветку с основной
git branch -d new-feature  # Удалить ветку после объединения
```

### Отправка изменений в удаленный репозиторий:
```
git push origin main  # Отправить изменения в основную ветку
```

### Получение изменений с удаленного репозитория:
```
git pull origin main  # Обновить свой код с репозитория
```

---

## Полезные фишки Git

### Удаление или отмена коммита:
```
git reset --hard HEAD~1  # Откатиться на 1 коммит назад (не желательно использовать, удаляет все изменения!)
git reset --soft HEAD~1  # Откатиться, но оставить изменения в файлах
git revert HEAD  # Создать новый коммит, отменяющий предыдущий
```

### Временное сохранение изменений (stash):
```
git stash      # Сохранить изменения в стек
git stash pop  # Достать последние сохраненные изменения
```

### Копирование изменений (`cherry-pick`) (берёт определённый коммит с другой ветки, а не всю ветку полностью):
```
git cherry-pick <commit-hash>

Пример использования от gpt:

Ты находишь нужный коммит в git log.
Копируешь его хэш (abc123 например).
Переключаешься в нужную ветку (main).
Выполняешь git cherry-pick abc123, и этот коммит добавляется в main.

 Когда это полезно?
Когда в одной ветке случайно сделали фикс, а он нужен в другой.
Когда берешь исправления из старой ветки, но не хочешь переносить весь её код.
```

### Использование `.gitignore`:
```
node_modules/
.idea/
*.log
```

### Настройка алиасов (сокращенные команды для экономии времени и удобства):
```
git config --global alias.co "checkout"
git config --global alias.br "branch"
git config --global alias.cm "commit -m"
git config --global alias.df "diff"
git config --global alias.hist "log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short"
```

